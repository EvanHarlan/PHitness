[1mdiff --git a/backend/controllers/weightTracking.controller.js b/backend/controllers/weightTracking.controller.js[m
[1mindex 83f9e34..9a4b8b3 100644[m
[1m--- a/backend/controllers/weightTracking.controller.js[m
[1m+++ b/backend/controllers/weightTracking.controller.js[m
[36m@@ -1,18 +1,15 @@[m
 import WeightTracking from '../models/weightTracking.model.js';[m
[31m-import { startOfWeek, startOfDay } from 'date-fns';[m
[32m+[m[32mimport { startOfWeek, startOfDay, addWeeks, isBefore } from 'date-fns';[m
 [m
 // Helper function to get the start of the current week[m
 const getCurrentWeekStart = () => {[m
[31m-  const now = new Date();[m
[31m-  const weekStart = startOfWeek(now, { weekStartsOn: 1 }); // Start week on Monday[m
[31m-  console.log('Current week start details:', {[m
[31m-    rawDate: now,[m
[31m-    weekStart,[m
[31m-    weekStartISO: weekStart.toISOString(),[m
[31m-    weekStartLocal: weekStart.toLocaleString(),[m
[31m-    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone[m
[31m-  });[m
[31m-  return weekStart;[m
[32m+[m[32m  return startOfWeek(new Date(), { weekStartsOn: 1 }); // Start week on Monday[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// Helper function to check if a date is more than a week old[m
[32m+[m[32mconst isMoreThanWeekOld = (date) => {[m
[32m+[m[32m  const oneWeekAgo = addWeeks(getCurrentWeekStart(), -1);[m
[32m+[m[32m  return isBefore(date, oneWeekAgo);[m
 };[m
 [m
 /**[m
[36m@@ -23,187 +20,128 @@[m [mconst getCurrentWeekStart = () => {[m
  */[m
 export const submitWeight = async (req, res) => {[m
   try {[m
[31m-    // Log the incoming request body and user[m
[31m-    console.log("Incoming weight payload:", req.body);[m
[31m-    console.log("Authenticated user:", req.user);[m
[31m-[m
[31m-    const { weight, userId, date } = req.body;[m
[32m+[m[32m    const { weight, userId } = req.body;[m
[32m+[m[32m    const targetUserId = userId || req.user._id;[m
 [m
[31m-    // Input validation[m
[31m-    if (!weight || isNaN(weight)) {[m
[32m+[m[32m    if (!targetUserId) {[m
       return res.status(400).json({[m
[31m-        error: 'Invalid weight value',[m
[31m-        details: 'Weight must be a valid number'[m
[32m+[m[32m        error: 'Missing user ID',[m
[32m+[m[32m        details: 'User ID is required for weight submission'[m
       });[m
     }[m
 [m
[31m-    // Convert weight to number and validate range[m
[32m+[m[32m    // Validate weight[m
     const weightValue = Number(weight);[m
[31m-    if (weightValue <= 0 || weightValue > 1000) {[m
[32m+[m[32m    if (!weightValue || weightValue <= 0 || weightValue > 1000) {[m
       return res.status(400).json({[m
         error: 'Invalid weight value',[m
         details: 'Weight must be between 0 and 1000 lbs'[m
       });[m
     }[m
 [m
[31m-    // Use the userId from the request body or fall back to the authenticated user[m
[31m-    const targetUserId = userId || req.user._id;[m
[31m-    if (!targetUserId) {[m
[31m-      return res.status(400).json({[m
[31m-        error: 'Missing user ID',[m
[31m-        details: 'User ID is required for weight submission'[m
[31m-      });[m
[31m-    }[m
[31m-[m
[31m-    // Parse the incoming date and get the start of that week[m
[31m-    const submissionDate = new Date(date);[m
[31m-    const submissionWeekStart = startOfWeek(submissionDate, { weekStartsOn: 1 });[m
[31m-    [m
[31m-    console.log('Submission date details:', {[m
[31m-      rawInput: date,[m
[31m-      parsedDate: submissionDate,[m
[31m-      parsedDateISO: submissionDate.toISOString(),[m
[31m-      parsedDateLocal: submissionDate.toLocaleString(),[m
[31m-      weekStart: submissionWeekStart,[m
[31m-      weekStartISO: submissionWeekStart.toISOString(),[m
[31m-      weekStartLocal: submissionWeekStart.toLocaleString(),[m
[31m-      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone[m
[31m-    });[m
[31m-[m
[31m-    // Get the start of the current week for comparison[m
[32m+[m[32m    // Get the start of the current week[m
     const currentWeekStart = getCurrentWeekStart();[m
[31m-    [m
[31m-    console.log('Date comparison details:', {[m
[31m-      submissionWeekStart: {[m
[31m-        timestamp: submissionWeekStart.getTime(),[m
[31m-        date: submissionWeekStart.toISOString()[m
[31m-      },[m
[31m-      currentWeekStart: {[m
[31m-        timestamp: currentWeekStart.getTime(),[m
[31m-        date: currentWeekStart.toISOString()[m
[31m-      },[m
[31m-      difference: submissionWeekStart.getTime() - currentWeekStart.getTime(),[m
[31m-      isSameWeek: submissionWeekStart.getTime() === currentWeekStart.getTime()[m
[31m-    });[m
[31m-[m
[31m-    // Check if the submission date is in the current week[m
[31m-    if (submissionWeekStart.getTime() !== currentWeekStart.getTime()) {[m
[31m-      console.log('Date mismatch detected:', {[m
[31m-        submissionWeekStart,[m
[31m-        currentWeekStart,[m
[31m-        difference: submissionWeekStart.getTime() - currentWeekStart.getTime()[m
[31m-      });[m
[31m-      return res.status(400).json({[m
[31m-        error: 'Invalid submission date',[m
[31m-        details: 'Weight entries must be submitted for the current week',[m
[31m-        submissionWeekStart: submissionWeekStart.toISOString(),[m
[31m-        currentWeekStart: currentWeekStart.toISOString()[m
[31m-      });[m
[31m-    }[m
 [m
[31m-    // Check for existing entry[m
[32m+[m[32m    // Check for existing entry this week[m
     const existingEntry = await WeightTracking.findOne({[m
       user: targetUserId,[m
[31m-      date: submissionWeekStart[m
[32m+[m[32m      date: currentWeekStart[m
     });[m
 [m
     let weightEntry;[m
     if (existingEntry) {[m
[31m-      console.log("Found existing weekly entry:", existingEntry);[m
[31m-      [m
       // Update existing entry[m
       existingEntry.weight = weightValue;[m
[31m-      existingEntry.entryType = 'weekly';[m
       weightEntry = await existingEntry.save();[m
[31m-      [m
[31m-      console.log("ðŸŸ¢ Weight entry updated:", weightEntry);[m
[31m-      [m
[31m-      return res.json({[m
[31m-        success: true,[m
[31m-        message: 'Updated your weight entry for this week',[m
[31m-        weightEntry,[m
[31m-        isUpdate: true[m
[32m+[m[32m    } else {[m
[32m+[m[32m      // Create new entry[m
[32m+[m[32m      weightEntry = await WeightTracking.create({[m
[32m+[m[32m        user: targetUserId,[m
[32m+[m[32m        weight: weightValue,[m
[32m+[m[32m        date: currentWeekStart,[m
[32m+[m[32m        entryType: 'weekly'[m
       });[m
     }[m
 [m
[31m-    // Create new weight entry[m
[31m-    console.log("Creating new weekly entry for date:", submissionWeekStart);[m
[31m-    weightEntry = new WeightTracking({[m
[31m-      user: targetUserId,[m
[31m-      weight: weightValue,[m
[31m-      date: submissionWeekStart,[m
[31m-      entryType: 'weekly'[m
[31m-    });[m
[31m-[m
[31m-    await weightEntry.save();[m
[31m-    console.log("ðŸŸ¢ Weight entry saved:", weightEntry);[m
[31m-[m
     res.json({[m
       success: true,[m
[31m-      message: 'Created new weight entry for this week',[m
[31m-      weightEntry,[m
[31m-      isUpdate: false[m
[32m+[m[32m      isUpdate: !!existingEntry,[m
[32m+[m[32m      weight: weightEntry.weight,[m
[32m+[m[32m      date: weightEntry.date[m
     });[m
[32m+[m
   } catch (error) {[m
     console.error('Error submitting weight:', error);[m
[31m-    [m
[31m-    // Handle specific MongoDB errors[m
[31m-    if (error.name === 'ValidationError') {[m
[31m-      return res.status(400).json({[m
[31m-        error: 'Validation Error',[m
[31m-        details: error.message,[m
[31m-        fields: error.errors[m
[31m-      });[m
[31m-    }[m
[31m-[m
[31m-    if (error.code === 11000) { // Duplicate key error[m
[31m-      return res.status(400).json({[m
[31m-        error: 'Duplicate Entry',[m
[31m-        details: 'A weight entry already exists for this week'[m
[31m-      });[m
[31m-    }[m
[31m-[m
[31m-    // Generic error response[m
     res.status(500).json({[m
       error: 'Failed to submit weight',[m
[31m-      details: error.message,[m
[31m-      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined[m
[32m+[m[32m      details: error.message[m
     });[m
   }[m
 };[m
 [m
[31m-export const getWeightHistory = async (req, res) => {[m
[32m+[m[32mexport const checkWeeklyWeightStatus = async (req, res) => {[m
   try {[m
[31m-    const weightHistory = await WeightTracking.find({[m
[31m-      user: req.user._id[m
[31m-    }).sort({ date: 1 });[m
[32m+[m[32m    const userId = req.user._id;[m
[32m+[m[32m    const currentWeekStart = getCurrentWeekStart();[m
[32m+[m
[32m+[m[32m    // Find the most recent weight entry[m
[32m+[m[32m    const lastEntry = await WeightTracking.findOne({ user: userId })[m
[32m+[m[32m      .sort({ date: -1 });[m
[32m+[m
[32m+[m[32m    if (!lastEntry) {[m
[32m+[m[32m      return res.json({[m
[32m+[m[32m        hasSubmittedWeight: false,[m
[32m+[m[32m        needsWeight: true,[m
[32m+[m[32m        lastEntry: null,[m
[32m+[m[32m        nextCheckDate: currentWeekStart[m
[32m+[m[32m      });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Check if the last entry is from this week[m
[32m+[m[32m    const isThisWeek = lastEntry.date.getTime() === currentWeekStart.getTime();[m
[32m+[m[32m    const isOldEntry = isMoreThanWeekOld(lastEntry.date);[m
[32m+[m
[32m+[m[32m    res.json({[m
[32m+[m[32m      hasSubmittedWeight: isThisWeek,[m
[32m+[m[32m      needsWeight: !isThisWeek && isOldEntry,[m
[32m+[m[32m      lastEntry: {[m
[32m+[m[32m        weight: lastEntry.weight,[m
[32m+[m[32m        date: lastEntry.date[m
[32m+[m[32m      },[m
[32m+[m[32m      nextCheckDate: addWeeks(lastEntry.date, 1)[m
[32m+[m[32m    });[m
 [m
[31m-    res.json(weightHistory);[m
   } catch (error) {[m
[31m-    console.error('Error fetching weight history:', error);[m
[32m+[m[32m    console.error('Error checking weight status:', error);[m
     res.status(500).json({[m
[31m-      error: 'Failed to fetch weight history'[m
[32m+[m[32m      error: 'Failed to check weight status',[m
[32m+[m[32m      details: error.message[m
     });[m
   }[m
 };[m
 [m
[31m-export const checkWeeklyWeightStatus = async (req, res) => {[m
[32m+[m[32mexport const getWeightHistory = async (req, res) => {[m
   try {[m
[31m-    const weekStartDate = getCurrentWeekStart();[m
[31m-    [m
[31m-    const weightEntry = await WeightTracking.findOne({[m
[31m-      user: req.user._id,[m
[31m-      date: weekStartDate[m
[31m-    });[m
[32m+[m[32m    const userId = req.user._id;[m
[32m+[m[32m    const { startDate, endDate } = req.query;[m
[32m+[m
[32m+[m[32m    const query = { user: userId };[m
[32m+[m[32m    if (startDate && endDate) {[m
[32m+[m[32m      query.date = {[m
[32m+[m[32m        $gte: new Date(startDate),[m
[32m+[m[32m        $lte: new Date(endDate)[m
[32m+[m[32m      };[m
[32m+[m[32m    }[m
 [m
[31m-    res.json({[m
[31m-      hasSubmittedWeight: !!weightEntry,[m
[31m-      currentWeekStart: weekStartDate[m
[31m-    });[m
[32m+[m[32m    const weightHistory = await WeightTracking.find(query)[m
[32m+[m[32m      .sort({ date: 1 });[m
[32m+[m
[32m+[m[32m    res.json(weightHistory);[m
   } catch (error) {[m
[31m-    console.error('Error checking weekly weight status:', error);[m
[32m+[m[32m    console.error('Error fetching weight history:', error);[m
     res.status(500).json({[m
[31m-      error: 'Failed to check weekly weight status'[m
[32m+[m[32m      error: 'Failed to fetch weight history',[m
[32m+[m[32m      details: error.message[m
     });[m
   }[m
 }; [m
\ No newline at end of file[m
